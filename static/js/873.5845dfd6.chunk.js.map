{"version":3,"file":"static/js/873.5845dfd6.chunk.js","mappings":"uPAEaA,EAASC,EAAAA,GAAAA,KAAH,gFAMNC,EAAQD,EAAAA,GAAAA,MAAH,sFAMLE,EAAQF,EAAAA,GAAAA,KAAH,4GAOLG,EAAQH,EAAAA,GAAAA,MAAH,oFAMLI,EAASJ,EAAAA,GAAAA,OAAH,yH,oCCpBNK,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAC7B,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KA2BMC,EAAQ,WACZH,EAAQ,IACRE,EAAU,GACX,EAED,OACE,UAAChB,EAAD,CAAQkB,SAvBS,SAAAC,GACjBA,EAAMC,iBAEN,IAAMC,EAAU,CACdR,KAAAA,EACAE,OAAAA,GAGEN,EAASa,MAAK,SAAAC,GAAE,OAAIA,EAAGV,OAASQ,EAAQR,IAAxB,IAClBW,MAAM,GAAD,OAAIH,EAAQR,KAAZ,8BAGPN,GAASkB,EAAAA,EAAAA,IAAgBJ,IAEzBJ,IACD,EAQC,WACE,UAACf,EAAD,YACE,SAACC,EAAD,oBACA,SAACC,EAAD,CACEsB,KAAK,OACLb,KAAK,OACLc,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,SAxCa,SAAAX,GACnBL,EAAQK,EAAMY,OAAOC,MACtB,EAuCOA,MAAOnB,KAET,SAACV,EAAD,sBACA,SAACC,EAAD,CACEsB,KAAK,MACLb,KAAK,SACLc,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRG,MAAOjB,EACPe,SA/CY,SAAAX,GAClBH,EAAUG,EAAMY,OAAOC,MACxB,QAgDG,SAAC3B,EAAD,CAAQqB,KAAK,SAAb,2BAGL,ECrEYvB,EAAQF,EAAAA,GAAAA,EAAH,4CAILgC,EAAOhC,EAAAA,GAAAA,GAAH,gHAOJI,EAASJ,EAAAA,GAAAA,OAAH,iKASNiC,EAAOjC,EAAAA,GAAAA,KAAH,uJCfV,SAASkC,IACd,IAAM5B,GAAWC,EAAAA,EAAAA,MACX4B,GAAS1B,EAAAA,EAAAA,IAAY2B,EAAAA,KAE3BC,EAAAA,EAAAA,YAAU,WACR/B,GAASgC,EAAAA,EAAAA,MACV,GAAE,CAAChC,IAMJ,OACE,wBACG6B,EAAOI,KAAI,YAA2B,IAAxB3B,EAAuB,EAAvBA,KAAM4B,EAAiB,EAAjBA,GAAI1B,EAAa,EAAbA,OACvB,OACE,UAACkB,EAAD,YACE,SAACC,EAAD,KACA,UAAC,EAAD,WACGrB,EADH,KACWE,MAEX,SAAC,EAAD,CAAQW,KAAK,SAASgB,QAAS,kBAbxB,SAAAD,GACflC,GAASoC,EAAAA,EAAAA,IAAmBF,GAC7B,CAW8CG,CAASH,EAAf,EAA/B,sBALSA,EAUd,KAGN,CClCM,IAAMtC,EAAQF,EAAAA,GAAAA,EAAH,0FAMLG,EAAQH,EAAAA,GAAAA,MAAH,4H,SCHX,SAAS4C,IACd,IAAMtC,GAAWC,EAAAA,EAAAA,MACX4B,GAAS1B,EAAAA,EAAAA,IAAYoC,EAAAA,IAK3B,OACE,4BACE,SAAC,EAAD,sCACA,SAAC,EAAD,CAAOpB,KAAK,OAAOb,KAAK,aAAamB,MAAOI,EAAQN,SAPvC,SAAAX,GACfZ,GAASwC,EAAAA,EAAAA,GAAe5B,EAAMY,OAAOC,OACtC,MAQF,CCdD,IAcA,EAdqB,WACnB,OACE,+BACE,4BACE,uCACA,SAAC1B,EAAD,KACA,sCACA,SAACuC,EAAD,KACA,SAACV,EAAD,QAIP,C","sources":["components/ContactForm/ContactForm.Styled.jsx","components/ContactForm/ContactForm.jsx","components/Contacts/Contacts.Styled.js","components/Contacts/Contacts.jsx","components/Filter/Filter.Styled.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormEl = styled.form`\n  width: 350px;\n  padding: 10px;\n  margin-left: 5px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n`;\n\nexport const Title = styled.span`\n  font-size: 14px;\n  margin-bottom: 5px;\n  display: flex;\n  font-style: italic;\n`;\n\nexport const Input = styled.input`\n  font-size: 14px;\n  margin-bottom: 5px;\n  padding: 5px;\n`;\n\nexport const Button = styled.button`\n  background-color: #b6ad90;\n  border-radius: 10px;\n  cursor: pointer;\n  padding: 10px 10px;\n`;\n","import React, { useState } from 'react';\nimport { FormEl, Label, Title, Input, Button } from './ContactForm.Styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContactsOper } from 'redux/operation';\n// import { nanoid } from '@reduxjs/toolkit';\nimport { selectContactsItem } from 'redux/selectors';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsItem);\n  const [name, setName] = useState('');\n  // const [tel, setTel] = useState('');\n  const [number, setNumber] = useState('');\n\n  const onNameChange = event => {\n    setName(event.target.value);\n  };\n\n  const onTelChange = event => {\n    setNumber(event.target.value);\n  };\n\n  const onAddClick = event => {\n    event.preventDefault();\n\n    const contact = {\n      name,\n      number,\n    };\n\n    if (contacts.some(el => el.name === contact.name)) {\n      alert(`${contact.name} is already in contacts!`);\n      return;\n    }\n    dispatch(addContactsOper(contact));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormEl onSubmit={onAddClick}>\n      <Label>\n        <Title>Name</Title>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={onNameChange}\n          value={name}\n        />\n        <Title>Number</Title>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={onTelChange}\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </FormEl>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.p`\n  font-size: 14px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  margin-left: 10px;\n`;\n\nexport const Button = styled.button`\n  font-size: 14px;\n  border: 1px solid silver;\n  border-radius: 10px;\n  cursor: pointer;\n  padding: 5px 10px;\n  margin-left: 20px;\n`;\n\nexport const Span = styled.span`\n  width: 6px;\n  height: 6px;\n  border-radius: 50%;\n  background-color: black;\n  margin-right: 10px;\n  margin-left: 20px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Item, Title, Button, Span } from './Contacts.Styled';\nimport { useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContactsOper, deleteContactsOper } from 'redux/operation';\nimport { selectFilterContacts } from 'redux/selectors';\n\nexport function Contacts() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilterContacts);\n\n  useEffect(() => {\n    dispatch(fetchContactsOper());\n  }, [dispatch]);\n\n  const onDelete = id => {\n    dispatch(deleteContactsOper(id));\n  };\n\n  return (\n    <ul>\n      {filter.map(({ name, id, number }) => {\n        return (\n          <Item key={id}>\n            <Span />\n            <Title>\n              {name}: {number}\n            </Title>\n            <Button type=\"button\" onClick={() => onDelete(id)}>\n              Delete\n            </Button>\n          </Item>\n        );\n      })}\n    </ul>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Title = styled.p`\n  font-size: 14px;\n  margin-bottom: 20px;\n  margin-left: 20px;\n`;\n\nexport const Input = styled.input`\n  font-size: 14px;\n  margin-bottom: 10px;\n  margin-left: 20px;\n  padding: 5px;\n  width: 300px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Title, Input } from './Filter.Styled';\nimport { filterContacts } from 'redux/contactSlice';\nimport { selectFilter } from 'redux/selectors';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const onSearch = event => {\n    dispatch(filterContacts(event.target.value));\n  };\n\n  return (\n    <div>\n      <Title>Find contacts by name:</Title>\n      <Input type=\"text\" name=\"filterTerm\" value={filter} onChange={onSearch} />\n    </div>\n  );\n}\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Contacts } from '../components/Contacts/Contacts';\nimport { Filter } from '../components/Filter/Filter';\n\nconst ContactsPage = () => {\n  return (\n    <>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <Contacts />\n      </div>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["FormEl","styled","Label","Title","Input","Button","ContactForm","dispatch","useDispatch","contacts","useSelector","selectContactsItem","useState","name","setName","number","setNumber","reset","onSubmit","event","preventDefault","contact","some","el","alert","addContactsOper","type","pattern","title","required","onChange","target","value","Item","Span","Contacts","filter","selectFilterContacts","useEffect","fetchContactsOper","map","id","onClick","deleteContactsOper","onDelete","Filter","selectFilter","filterContacts"],"sourceRoot":""}